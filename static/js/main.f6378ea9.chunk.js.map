{"version":3,"sources":["components/SearchBox.js","components/Button.js","components/Text.js","components/ErrorBoundary.js","containers/App.js","serviceWorker.js","index.js"],"names":["SearchBox","searchChange","id","type","placeholder","onChange","Button","buttonclick","onClick","Text","props","newtitle","ErrorBoundary","state","hasError","error","info","this","setState","children","Component","App","useState","setID","title","setTitle","allusers","setAllUsers","useEffect","fetch","then","response","json","users","event","target","value","filteredTitle","filter","user","String","map","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"yQAGaA,G,YAAY,SAAC,GAAoB,IAAnBC,EAAkB,EAAlBA,aAEvB,OACI,6BACI,2BAAOC,GAAG,YAAYC,KAAK,SAASC,YAAY,aAAaC,SAAUJ,OCJtEK,G,MAAS,SAAC,GAAmB,IAAlBC,EAAiB,EAAjBA,YACpB,OACI,6BACI,4BAAQL,GAAG,SAASC,KAAK,SAASK,QAASD,GAA3C,iBCJCE,EAAO,SAACC,GACjB,OACI,yBAAKR,GAAG,QACJ,qCAAWQ,EAAMC,Y,4BCcdC,E,kDAhBX,WAAYF,GAAO,IAAD,8BACd,cAAMA,IACDG,MAAQ,CACTC,UAAU,GAHA,E,8DAMAC,EAAOC,GACrBC,KAAKC,SAAS,CAACJ,UAAU,M,+BAGzB,OAAIG,KAAKJ,MAAMC,SACJ,4CAEJG,KAAKP,MAAMS,a,GAdEC,aC2CbC,MAtCf,WAAgB,IAAD,EACOC,mBAAS,IADhB,mBACNpB,EADM,KACFqB,EADE,OAEaD,mBAAS,IAFtB,mBAENE,EAFM,KAECC,EAFD,OAGmBH,mBAAS,IAH5B,mBAGNI,EAHM,KAGIC,EAHJ,KA2Bb,OArBAC,qBAAU,WACQ,KAAbF,GACDG,MAAM,+CACLC,MAAK,SAAAC,GACJ,OAAOA,EAASC,UAEjBF,MAAK,SAAAG,GACJN,EAAYM,SAehB,6BACE,kBAAC,EAAD,CAAWhC,aAXW,SAACiC,GACzBX,EAAMW,EAAMC,OAAOC,UAWf,kBAAC,EAAD,KACE,kBAAC,EAAD,CAAQ7B,YATW,SAAC2B,GAC1B,IAAMG,EAAgBX,EAASY,QAAO,SAAAC,GAAI,OAAIC,OAAOD,EAAKrC,MAAQA,KAAIuC,KAAI,SAAAF,GAAI,OAAIA,EAAKf,SACvFC,EAASY,MAQH,kBAAC,EAAD,CAAM1B,SAAUa,OC3BNkB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBxB,MAAK,SAAAyB,GACJA,EAAaC,gBAEdC,OAAM,SAAA1C,GACL2C,QAAQ3C,MAAMA,EAAM4C,c","file":"static/js/main.f6378ea9.chunk.js","sourcesContent":["import React from 'react'\nimport './SearchBox.css'\n\nexport const SearchBox = ({searchChange}) => {\n    // const {name, email, id} = props;\n    return (\n        <div>\n            <input id=\"searchBox\" type='number' placeholder='Give an ID' onChange={searchChange}/>\n        </div>\n    );\n}\n\n","import React from 'react'\nimport './Button.css'\n\nexport const Button = ({buttonclick}) => {\n    return (\n        <div>\n            <button id=\"button\" type=\"button\" onClick={buttonclick}>Get Title!</button>\n        </div>\n    );\n}\n","import React from 'react'\n\nexport const Text = (props) => {\n    return (\n        <div id=\"text\">\n            <p>Title: {props.newtitle}</p>\n        </div>\n    );\n}\n","import React, {Component} from 'react';\n\nclass ErrorBoundary extends Component {\n    constructor(props){\n        super(props);\n        this.state = {\n            hasError: false\n        }\n    }\n    componentDidCatch(error, info){\n        this.setState({hasError: true});\n    }\n    render(){\n        if (this.state.hasError){\n            return <h1>Oops. Error.</h1>\n        }\n        return this.props.children;\n    }\n}\nexport default ErrorBoundary;","import React, {useState, useEffect} from 'react';\nimport './App.css';\nimport {SearchBox} from '../components/SearchBox'\nimport {Button} from '../components/Button'\nimport {Text} from '../components/Text'\nimport ErrorBoundry from '../components/ErrorBoundary'\n \nfunction App() {\n  const [id, setID] = useState(\"\");\n  const [title, setTitle] = useState(\"\");\n  const [allusers, setAllUsers] = useState(\"\");\n\n  // Similar to componentDidMount and componentDidUpdate:\n  useEffect(() => {\n    if(allusers === \"\") {\n      fetch('https://jsonplaceholder.typicode.com/posts/')\n      .then(response => {\n        return response.json();\n      })\n      .then(users => {\n        setAllUsers(users);\n      });\n    }\n  });\n\n  const searchChangeEvent = (event) => {\n    setID(event.target.value);\n  }\n\n  const buttonOnClickEvent = (event) => {\n    const filteredTitle = allusers.filter(user => String(user.id) === id).map(user => user.title);\n    setTitle(filteredTitle);\n  };\n\n  return (\n    <div>\n      <SearchBox searchChange={searchChangeEvent}/>\n        <ErrorBoundry>\n          <Button buttonclick={buttonOnClickEvent}/>\n          <Text newtitle={title}/>\n        </ErrorBoundry>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}